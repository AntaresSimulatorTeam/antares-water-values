from functions_iterative import AntaresParameter, Reservoir, itr_control
import pytest
import numpy as np

def test_itr_control():

    pen_low = 3000
    pen_high = 3000
    pen_final = 3000

    param = AntaresParameter(S=5,H=168,NTrain=1)
    reservoir = Reservoir(param,"test_data/one_node","area", final_level=True)
    
    xNsteps = 20
    X = np.linspace(0, reservoir.capacity, num = xNsteps)

    vb, G, _, _, controls_upper, traj = itr_control(param=param, reservoir=reservoir, output_path="test_data/one_node", pen_low=pen_low, pen_high=pen_high, X=X,N=3, pen_final=pen_final, tol_gap=1e-4) 

    assert G[0][0].list_cut == pytest.approx([(300.0022431781, -848257117.7874993),
 (200.08020216786073, -943484691.5152471),
 (100.0003310016, -828694927.2829424),
 (0, 0)])
    
    assert G[0][0].breaking_point==pytest.approx(np.array([-8400000.0,
 -953018.7010290311,
 1146981.5347944114,
 8286921.842985533,
 8400000.0]))
    
    assert controls_upper[-1] == pytest.approx(np.array([[ 123864.],
       [ 255912.],
       [  34924.],
       [1139897.],
       [ 773918.]]))

    assert traj[1] == pytest.approx(np.array([[4450000.],
       [6420000.],
       [2380000.],
       [6350000.],
       [6320000.],
       [2280000.]]))

    assert vb == pytest.approx(np.array([[-5.44276365e+09, -4.36329798e+09, -4.30354500e+09,
        -2.41781989e+09, -1.41870571e+09,  0.00000000e+00],
       [-5.28486774e+09, -4.25799257e+09, -3.38627742e+09,
        -2.31251448e+09, -1.31340029e+09,  0.00000000e+00],
       [-5.12697182e+09, -4.15268716e+09, -3.22838136e+09,
        -2.20720907e+09, -1.20809488e+09,  0.00000000e+00],
       [-4.98446159e+09, -4.04738174e+09, -3.07425277e+09,
        -2.10190367e+09, -1.10278947e+09,  0.00000000e+00],
       [-4.87915618e+09, -3.94207633e+09, -2.96894737e+09,
        -1.99659826e+09, -9.97484054e+08,  0.00000000e+00],
       [-4.77385077e+09, -3.83677092e+09, -2.86364196e+09,
        -1.89129286e+09, -8.92178642e+08,  0.00000000e+00],
       [-4.66854538e+09, -3.73146551e+09, -2.75833659e+09,
        -1.78598745e+09, -7.86873443e+08,  0.00000000e+00],
       [-4.56324001e+09, -3.62616010e+09, -2.65303124e+09,
        -1.68068205e+09, -6.97788201e+08,  0.00000000e+00],
       [-4.45793464e+09, -3.52085471e+09, -2.54772590e+09,
        -1.57537670e+09, -6.45156592e+08,  0.00000000e+00],
       [-4.35262927e+09, -3.41554936e+09, -2.44242055e+09,
        -1.47481530e+09, -5.92524983e+08,  0.00000000e+00],
       [-4.24732390e+09, -3.31024401e+09, -2.33711521e+09,
        -1.39639147e+09, -5.39893375e+08,  0.00000000e+00],
       [-4.14201854e+09, -3.20493866e+09, -2.23180986e+09,
        -1.34375968e+09, -4.87261766e+08,  0.00000000e+00],
       [-4.03671319e+09, -3.09963332e+09, -2.12650452e+09,
        -1.29112789e+09, -4.34630157e+08,  0.00000000e+00],
       [-3.93140785e+09, -2.99432797e+09, -2.02119917e+09,
        -1.23849610e+09, -3.81998548e+08,  0.00000000e+00],
       [-3.82610250e+09, -2.88902263e+09, -1.91589383e+09,
        -1.18586431e+09, -3.29366940e+08,  0.00000000e+00],
       [-3.75680250e+09, -2.80469325e+09, -1.81058848e+09,
        -1.13323252e+09, -2.76735331e+08,  0.00000000e+00],
       [-3.70417075e+09, -2.75206123e+09, -1.70528314e+09,
        -1.08060073e+09, -2.24103722e+08,  0.00000000e+00],
       [-3.65153900e+09, -2.69942962e+09, -1.59997779e+09,
        -1.02796894e+09, -1.71472114e+08,  0.00000000e+00],
       [-3.59890725e+09, -2.64679800e+09, -1.49830812e+09,
        -9.75337146e+08, -1.18840505e+08,  0.00000000e+00],
       [-3.54627549e+09, -2.59416639e+09, -1.41471259e+09,
        -9.22705355e+08, -6.62088960e+07,  0.00000000e+00]]))

