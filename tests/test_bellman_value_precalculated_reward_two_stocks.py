import numpy as np
import pytest

from functions_iterative import ReservoirManagement, TimeScenarioParameter
from multi_stock_bellman_value_calculation import *
from read_antares_data import Reservoir
from reservoir_management import MultiStockManagement
from type_definition import time_list_area_value_to_array


def test_bellman_value_precalculated_multi_stock(param: TimeScenarioParameter) -> None:

    reservoir_1 = Reservoir("test_data/two_nodes", "area_1")
    reservoir_management_1 = ReservoirManagement(
        reservoir=reservoir_1,
        penalty_bottom_rule_curve=3000,
        penalty_upper_rule_curve=3000,
        penalty_final_level=3000,
        force_final_level=True,
    )

    reservoir_2 = Reservoir("test_data/two_nodes", "area_2")
    reservoir_management_2 = ReservoirManagement(
        reservoir=reservoir_2,
        penalty_bottom_rule_curve=3000,
        penalty_upper_rule_curve=3000,
        penalty_final_level=3000,
        force_final_level=True,
    )

    multi_management = MultiStockManagement(
        [reservoir_management_1, reservoir_management_2]
    )

    levels, _, bellman_costs, bellman_controls, slopes, _ = precalculated_method(
        param=param,
        multi_stock_management=multi_management,
        output_path="test_data/two_nodes",
        len_controls=5,
        len_bellman=5,
        name_solver="CLP",
        controls_looked_up="line+diagonal",
        verbose=True,
    )

    assert time_list_area_value_to_array(levels, param, multi_management.areas)[
        ::-1
    ] == pytest.approx(
        np.array(
            [
                [
                    [0.0, 628377.6569],
                    [277853.0681, 0.0],
                    [175340.436, 628377.6569],
                    [277853.0681, 396540.564],
                    [409896.721, 628377.6569],
                    [277853.0681, 927000.529],
                    [589466.8605, 628377.6569],
                    [277853.0681, 1333106.7645],
                    [769037.0, 628377.6569],
                    [277853.0681, 1739213.0],
                ],
                [
                    [0.0, 628377.6569],
                    [277853.0681, 0.0],
                    [178416.584, 628377.6569],
                    [277853.0681, 403497.416],
                    [486031.384, 628377.6569],
                    [277853.0681, 1099182.616],
                    [627534.192, 628377.6569],
                    [277853.0681, 1419197.808],
                    [769037.0, 628377.6569],
                    [277853.0681, 1739213.0],
                ],
                [
                    [0.0, 628377.6569],
                    [277853.0681, 0.0],
                    [180723.695, 628377.6569],
                    [277853.0681, 408715.055],
                    [488338.495, 628377.6569],
                    [277853.0681, 1104400.255],
                    [628687.7475, 628377.6569],
                    [277853.0681, 1421806.6275],
                    [769037.0, 628377.6569],
                    [277853.0681, 1739213.0],
                ],
                [
                    [0.0, 628377.6569],
                    [277853.0681, 0.0],
                    [183030.806, 628377.6569],
                    [277853.0681, 413932.694],
                    [491414.643, 628377.6569],
                    [277853.0681, 1111357.107],
                    [630225.8215, 628377.6569],
                    [277853.0681, 1425285.0535],
                    [769037.0, 628377.6569],
                    [277853.0681, 1739213.0],
                ],
                [
                    [0.0, 628377.6569],
                    [277853.0681, 0.0],
                    [185337.917, 628377.6569],
                    [277853.0681, 419150.333],
                    [493721.754, 628377.6569],
                    [277853.0681, 1116574.746],
                    [631379.377, 628377.6569],
                    [277853.0681, 1427893.873],
                    [769037.0, 628377.6569],
                    [277853.0681, 1739213.0],
                ],
            ]
        )
    )

    assert np.array(
        [
            [
                [
                    [u[a][ScenarioIndex(s)] for s in range(param.len_scenario)]
                    for a in multi_management.areas
                ]
                for u in bellman_controls[WeekIndex(w)]
            ]
            for w in range(param.len_week)
        ]
    )[::-1] == pytest.approx(
        np.array(
            [
                [
                    [[0.0], [-90240.67344721]],
                    [[0.0], [-159655.05088864]],
                    [[0.0], [-34203.56041625]],
                    [[0.0], [-34203.56041625]],
                    [[39944.257], [-51818.4723395]],
                    [[0.0], [90752.243]],
                    [[219514.397], [-131006.63198273]],
                    [[0.0], [419664.0]],
                    [[306936.0], [-77302.19219234]],
                    [[13797.0019], [419664.0]],
                ],
                [
                    [[13776.0], [263393.096]],
                    [[0.0], [-57989.9214361]],
                    [[51122.05876278], [263393.096]],
                    [[141225.27916395], [127473.89575222]],
                    [[201267.58387865], [67431.59103752]],
                    [[50323.95476654], [284099.7914371]],
                    [[231413.469], [76863.85569213]],
                    [[74764.73385189], [419664.0]],
                    [[306936.0], [100493.89663835]],
                    [[51958.81891699], [419664.0]],
                ],
                [
                    [[0.0], [236690.76271387]],
                    [[113212.486], [-301069.8526227]],
                    [[16083.106], [240312.84479417]],
                    [[210872.47872395], [41445.66260587]],
                    [[133394.09890117], [170341.55211977]],
                    [[101447.02090465], [202288.63011629]],
                    [[156432.366], [177549.93334941]],
                    [[3563.59564383], [368434.33202641]],
                    [[296781.616], [221463.43148511]],
                    [[107700.7029777], [419664.0]],
                ],
                [
                    [[0.0], [130921.91688424]],
                    [[110996.375], [-322182.0]],
                    [[16174.115], [114747.78543668]],
                    [[110996.375], [19925.42901135]],
                    [[16943.145], [113978.75465465]],
                    [[0.0], [130921.91688424]],
                    [[260094.25280634], [-112681.75779224]],
                    [[0.0], [352650.795]],
                    [[294565.505], [-112246.5435333]],
                    [[88178.25727388], [419664.0]],
                ],
                [
                    [[0.0], [-239100.85065468]],
                    [[68061.79186323], [-283168.84524749]],
                    [[11669.82742663], [-123952.89129106]],
                    [[9374.37530585], [-236001.35946376]],
                    [[16279.107], [-127408.97334741]],
                    [[13933.62538023], [37228.643]],
                    [[153936.737], [-230625.98533142]],
                    [[15398.15215653], [348547.763]],
                    [[291594.357], [-276527.10780168]],
                    [[15398.15215653], [419664.0]],
                ],
            ]
        )
    )

    assert np.array(
        [[c for c in bellman_costs[WeekIndex(w)]] for w in range(param.len_week)]
    )[::-1] == pytest.approx(
        np.array(
            [
                [
                    6.11715439e08,
                    1.57735664e09,
                    1.34393113e08,
                    1.55894331e08,
                    9.64515660e07,
                    7.35895296e07,
                    7.13250177e07,
                    2.76110075e08,
                    3.34217875e08,
                    1.46027096e09,
                ],
                [
                    1.56800823e09,
                    4.52003439e09,
                    3.12679140e08,
                    5.45855217e08,
                    1.32167660e08,
                    9.37003126e07,
                    1.11559456e08,
                    3.68985817e08,
                    2.92381147e08,
                    1.59301272e09,
                ],
                [
                    2.22680499e09,
                    6.69789110e09,
                    8.12642356e08,
                    1.53545493e09,
                    1.54090769e08,
                    1.09943429e08,
                    1.32183194e08,
                    6.49155773e07,
                    1.17527064e08,
                    8.90225581e08,
                ],
                [
                    3.55405507e09,
                    7.41174086e09,
                    1.26941876e09,
                    2.07144628e09,
                    1.83746806e08,
                    1.38954129e08,
                    1.60670835e08,
                    9.05725353e07,
                    1.37594865e08,
                    7.93046500e08,
                ],
                [
                    1.19484257e09,
                    3.36829717e09,
                    1.60502373e08,
                    1.83850617e08,
                    1.09427096e08,
                    6.84937699e07,
                    9.22631036e07,
                    5.40919797e07,
                    7.58001102e07,
                    7.36555789e08,
                ],
            ]
        )
    )

    assert np.array(
        [
            [[u[a] for a in multi_management.areas] for u in slopes[WeekIndex(w)]]
            for w in range(param.len_week)
        ]
    )[::-1] == pytest.approx(
        np.array(
            [
                [
                    [-3251.26394136, -215.58],
                    [-12976.86266417, -13333.33],
                    [-166.24, -166.25],
                    [-166.24, -166.25],
                    [-139.92609417, -166.25],
                    [-166.24, -119.16],
                    [-139.92609417, -166.25],
                    [-119.32, 2884.88],
                    [2880.68018282, -115.17],
                    [-115.17, 3000.0],
                ],
                [
                    [-10000.0, -500.0],
                    [-10058.07618461, -13333.33],
                    [-6251.26, -355.51125799],
                    [-3166.2501625, -3166.2501625],
                    [-166.24, -166.25],
                    [-166.24, -119.16],
                    [-104.42613696, -166.25],
                    [-119.16, 2914.58670837],
                    [2860.07, -166.25],
                    [-119.32, 5884.88],
                ],
                [
                    [-13042.99429688, -10000.0],
                    [-10000.0, -13333.34],
                    [-3166.25, -3166.25],
                    [-6531.20456034, -6704.64433232],
                    [-166.24, -166.25],
                    [-166.25032101, -166.25032101],
                    [-104.42613696, -166.25],
                    [-151.93390363, -108.90546172],
                    [-104.42613696, -166.25],
                    [-119.16, 5914.59],
                ],
                [
                    [-16042.99, -10000.0],
                    [-10000.0, -16333.34],
                    [-6704.63664893, -6704.64],
                    [-6704.63664893, -6704.64],
                    [-166.24, -166.25],
                    [-166.25, -166.25],
                    [-166.24, -166.25],
                    [-166.25, -138.85],
                    [-166.24, -166.25],
                    [-151.93, 2891.09],
                ],
                [
                    [-19042.99, -10000.0],
                    [-7485.01816544, -9980.02344475],
                    [-166.25, -166.25],
                    [-220.43833077, -220.43833077],
                    [-124.68609673, -166.25],
                    [-166.25, -114.57485738],
                    [-124.68609673, -166.25],
                    [-166.25, 0.0],
                    [-82.84696497, -166.25],
                    [-166.25, 2861.15],
                ],
            ]
        )
    )
